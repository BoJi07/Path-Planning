#include<iostream>
#include "Planner.h"
#include <time.h>
#include <stdlib.h>

using std::cin;

vector<vector<int>> randomGenerateObstacle(int number, int row, int col,int startx, int starty, int endx, int endy){
    vector<vector<int>> res (number,vector<int>(2));
    for(int i = 0; i<number; i++){
        int randx = rand()%row;
        int randy = rand()%col;
        if((randx!=startx||randy!=starty)&&(randx!=endx||randy!=endy)){
            res[i][0] = randx;
            res[i][1] = randy;
        }
        else{
            i--;
        }
    }
    return res;
}

int main(){
    srand(time(NULL));
    int row = 0;
    int col = 0;
    int startx = 0;
    int starty = 0;
    int endx = 0;
    int endy = 0;
    int number_of_obstacle = 0;
    //User Input
    cout<<"Enter the row number for the Map:\n";
    cin >> row;
    cout<<"Enter the col number for the Map:\n";
    cin >> col;
    cout<<"Enter the x pos for the starting point:(less than "<< row <<")\n";
    cin >> startx;
    cout<<"Enter the y pos for the starting point:(less than "<< col <<")\n";
    cin >> starty;
    cout<<"Enter the x pos for the ending point:(less than "<< row <<")\n";
    cin >> endx;
    cout<<"Enter the y pos for the ending point:(less than "<< col <<")\n";
    cin >> endy;
    cout<<"Enter the number of obstacles:\n";
    cin >> number_of_obstacle; 
    //end of user input
    
    Map map{row,col};
    
    vector<vector<int>> obstacles = randomGenerateObstacle(number_of_obstacle,row, col, startx, starty, endx, endy);

    map.setObstacle(obstacles);
    LPAStar pathplan{startx, starty, endx,endy,map};
    cout<<"\n\n compute the shortest path from the start position to end position before the map change"<<"\n\n";
    pathplan.inti();
    pathplan.planner();
    vector<pair<int,int>> trajectory = pathplan.constructPath();
    if(pathplan.checkPath()){
        cout<<"\n\n Map changes : one the path point become the obstacle and path need to replanning"<<"\n\n";
        vector<vector<int>> obstacleChange = {};
        int point = rand() % trajectory.size(); //alter one of the trajectory point to obstacle
        cout<<"["<<trajectory[point].first<<","<<trajectory[point].second<<"] changes to obstacles"<<"\n\n";
        obstacleChange.push_back({trajectory[point].first,trajectory[point].second});
        pathplan.costChange(obstacleChange);
        pathplan.clearPath();
        cout<<"\n\n The changed  map without the path on it"<<"\n\n";
        pathplan.getMapInfo();
        cout<<"\n\n The new path is generated by using the lifelong planning A* algorithm"<<"\n\n";
        pathplan.planner();
        pathplan.constructPath();
    }

    
}